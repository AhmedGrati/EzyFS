# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Email {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Int
  sentDate: DateTime!
  emailType: EmailTypeEnum!
  sender: User!
  token: String!
  verificationToken: String!
  isExpired: Boolean
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EmailTypeEnum {
  CONFIRMATION
  RESET_PASSWORD
}

type QueuedJob {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  JobId: String!
  description: String!
  jobType: ProcessorType!
  sourcePath: String
  outputPath: String
  sourceType: SourceTypeEnum!
  owner: User!
  cronString: String
  startDate: DateTime
  endDate: DateTime
  lastExecutionDate: DateTime
  lastExecutionStatus: ExecutionStatusEnum
  attemptsMade: Float
  failedReason: String
  stacktrace: String
  finishedOn: DateTime
  processedOn: DateTime
}

enum ProcessorType {
  ENCRYPTION
  DECRYPTION
  COMPRESSION
  DECOMPRESSION
}

enum SourceTypeEnum {
  FILE
  DIRECTORY
}

enum ExecutionStatusEnum {
  SUCCESS
  FAILED
  PAUSED
  CANCELED
  DELAYED
  WAITING
  ACTIVE
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  id: Int
  username: String!
  firstname: String
  lastname: String
  completedSignUp: Boolean!
  age: Float
  email: String!
  localization: String
  telNumber: String
  isConfirmed: Boolean!
  sentEmails: [Email!]
  Jobs: [User!]
  lowerCasedUsername: String!
  gender: Gender
  roles: [UserRoleEnum!]!
}

enum Gender {
  MALE
  FEMALE
}

enum UserRoleEnum {
  ADMIN
  USER
}

type TokenModel {
  access_token: String!
  refresh_token: String!
  user: User!
}

type CreateKeyPairOutput {
  privateKey: String!
  fingerprint: String!
}

type Query {
  users: [User!]!
  user(id: Float!): User!
  existByEmail(email: String!): Boolean!
  existByUsername(username: String!): Boolean!
  email: [Email!]!
  emails(id: Int!): Email!
  refreshToken(refreshToken: String!): TokenModel!
}

type Mutation {
  firstStageSignUp(firstStageUserInput: FirstStageUserInput!): User!
  secondStageSignUp(secondStageDTOInput: SecondStageDTOInput!): User!
  update(updateUserInput: UpdateUserInput!): User!
  remove(id: Float!): User!
  confirmEmail(emailVerificationInput: EmailVerificationInput!): TokenModel!
  sendResetPasswordEmail(ResetPasswordEmailInput: ResetPasswordEmailInput!): Boolean!
  resetPassword(ResetPasswordInput: ResetPasswordInput!): Boolean!
  login(credentialsInput: CredentialsInput!): TokenModel!
  createJob(createJobInput: CreateJobInput!): QueuedJob!
  createKeyPair(createKeyPairInput: CreateKeyPairInput!): CreateKeyPairOutput!
}

input FirstStageUserInput {
  username: String!
  email: String!
  password: String!
}

input SecondStageDTOInput {
  id: Float!
  localization: String!
  telNumber: String!
  firstname: String!
  lastname: String!
  age: Float!
  gender: Float!
}

input UpdateUserInput {
  id: Int!
  username: String
  firstname: String
  lastname: String
  age: Float
  email: String
  localization: String
  telNumber: String
  password: String
  roles: [String!]
  gender: Float
}

input EmailVerificationInput {
  token: String!
  verificationToken: String!
  userId: Float!
}

input ResetPasswordEmailInput {
  email: String!
}

input ResetPasswordInput {
  token: String!
  verificationToken: String!
  email: String!
  password: String!
}

input CredentialsInput {
  username: String!
  password: String!
}

input CreateJobInput {
  jobType: ProcessorType!
  description: String!
  sourcePath: String!
  outputPath: String!
  sourceType: SourceTypeEnum = FILE
  cronString: String
  userId: Float!
  startDate: DateTime!
  endDate: DateTime
}

input CreateKeyPairInput {
  algorithm: EncryptionAlgorithmEnum!
  publicKeyEncodingType: String!
  privateKeyEncodingType: String!
  pirvateKeyPassphrase: String!
  ownerId: Float!
}

enum EncryptionAlgorithmEnum {
  RSA
  DSA
  ED25519
  X448
  X25519
  EC
  ED448
  RSAPSS
}
